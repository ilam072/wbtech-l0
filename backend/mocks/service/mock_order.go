// Code generated by MockGen. DO NOT EDIT.
// Source: order.go
//
// Generated by this command:
//
//	mockgen -source=order.go -destination=../../mocks/service/mock_order.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ilam072/wbtech-l0/backend/internal/types/domain"
	dto "github.com/ilam072/wbtech-l0/backend/internal/types/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
	isgomock struct{}
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepo) CreateOrder(arg0 context.Context, arg1 domain.Order, arg2 domain.Delivery, arg3 domain.Payment, arg4 []domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepoMockRecorder) CreateOrder(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepo)(nil).CreateOrder), arg0, arg1, arg2, arg3, arg4)
}

// GetOrder mocks base method.
func (m *MockOrderRepo) GetOrder(ctx context.Context, ID string) (domain.FullOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, ID)
	ret0, _ := ret[0].(domain.FullOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderRepoMockRecorder) GetOrder(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderRepo)(nil).GetOrder), ctx, ID)
}

// MockOrderCache is a mock of OrderCache interface.
type MockOrderCache struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCacheMockRecorder
	isgomock struct{}
}

// MockOrderCacheMockRecorder is the mock recorder for MockOrderCache.
type MockOrderCacheMockRecorder struct {
	mock *MockOrderCache
}

// NewMockOrderCache creates a new mock instance.
func NewMockOrderCache(ctrl *gomock.Controller) *MockOrderCache {
	mock := &MockOrderCache{ctrl: ctrl}
	mock.recorder = &MockOrderCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCache) EXPECT() *MockOrderCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOrderCache) Get(key string) (dto.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(dto.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderCacheMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderCache)(nil).Get), key)
}

// Set mocks base method.
func (m *MockOrderCache) Set(key string, order dto.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, order)
}

// Set indicates an expected call of Set.
func (mr *MockOrderCacheMockRecorder) Set(key, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockOrderCache)(nil).Set), key, order)
}

// MockOrderConverter is a mock of OrderConverter interface.
type MockOrderConverter struct {
	ctrl     *gomock.Controller
	recorder *MockOrderConverterMockRecorder
	isgomock struct{}
}

// MockOrderConverterMockRecorder is the mock recorder for MockOrderConverter.
type MockOrderConverterMockRecorder struct {
	mock *MockOrderConverter
}

// NewMockOrderConverter creates a new mock instance.
func NewMockOrderConverter(ctrl *gomock.Controller) *MockOrderConverter {
	mock := &MockOrderConverter{ctrl: ctrl}
	mock.recorder = &MockOrderConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderConverter) EXPECT() *MockOrderConverterMockRecorder {
	return m.recorder
}

// DomainToDtoOrder mocks base method.
func (m *MockOrderConverter) DomainToDtoOrder(fullOrder domain.FullOrder) dto.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainToDtoOrder", fullOrder)
	ret0, _ := ret[0].(dto.Order)
	return ret0
}

// DomainToDtoOrder indicates an expected call of DomainToDtoOrder.
func (mr *MockOrderConverterMockRecorder) DomainToDtoOrder(fullOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainToDtoOrder", reflect.TypeOf((*MockOrderConverter)(nil).DomainToDtoOrder), fullOrder)
}

// DtoToDomainOrder mocks base method.
func (m *MockOrderConverter) DtoToDomainOrder(arg0 dto.Order) (domain.Order, domain.Delivery, domain.Payment, []domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DtoToDomainOrder", arg0)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(domain.Delivery)
	ret2, _ := ret[2].(domain.Payment)
	ret3, _ := ret[3].([]domain.Item)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// DtoToDomainOrder indicates an expected call of DtoToDomainOrder.
func (mr *MockOrderConverterMockRecorder) DtoToDomainOrder(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DtoToDomainOrder", reflect.TypeOf((*MockOrderConverter)(nil).DtoToDomainOrder), arg0)
}
